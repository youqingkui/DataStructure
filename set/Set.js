// Generated by CoffeeScript 1.8.0
(function() {
  var Set,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Set = (function() {
    function Set() {
      this.dataStore = [];
      this.add = function(data) {
        if (!(__indexOf.call(this.dataStore, data) >= 0)) {
          this.dataStore.push(data);
          return true;
        } else {
          return false;
        }
      };
      this.remove = function(data) {
        var pos;
        pos = this.dataStore.indexOf(data);
        if (pos > -1) {
          this.dataStore.splice(pos, 1);
          return true;
        } else {
          return false;
        }
      };
      this.size = function() {
        return this.dataStore.length;
      };
      this.union = function(set) {
        var i, tempSet, _i, _j, _len, _len1, _ref, _ref1;
        tempSet = new Set();
        _ref = this.dataStore;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          tempSet.add(i);
        }
        _ref1 = set.dataStore;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          i = _ref1[_j];
          if (!(tempSet.contains(i))) {
            tempSet.dataStore.push(i);
          }
        }
        return tempSet;
      };
      this.intersect = function(set) {
        var i, tmpSet, _i, _len, _ref;
        tmpSet = new Set();
        _ref = this.dataStore;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (set.contains(i)) {
            tmpSet.add(i);
          }
        }
        return tmpSet;
      };
      this.subset = function(set) {
        var i, _i, _len, _ref;
        if (this.size() > set.size()) {
          return false;
        } else {
          _ref = this.dataStore;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            if (!(set.contains(i))) {
              return false;
            }
          }
          return true;
        }
      };
      this.difference = function() {};
      this.contains = function(data) {
        if (__indexOf.call(this.dataStore, data) >= 0) {
          return true;
        } else {
          return false;
        }
      };
      this.show = function() {
        return this.dataStore;
      };
    }

    return Set;

  })();

  module.exports = Set;

}).call(this);

//# sourceMappingURL=Set.js.map
