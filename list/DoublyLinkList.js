// Generated by CoffeeScript 1.8.0
(function() {
  var LList, Node, cities;

  Node = (function() {
    function Node(element) {
      this.element = element;
      this.next = null;
      this.previous = null;
    }

    return Node;

  })();

  LList = (function() {
    function LList() {
      this.head = new Node("head");
      this.find = function(item) {
        var currNode;
        currNode = this.head;
        while (currNode.element !== item) {
          currNode = currNode.next;
        }
        return currNode;
      };
      this.findPrevious = function(item) {
        var currNode;
        currNode = this.head;
        while ((!(currNode.next === null)) && (currNode.next.element !== item)) {
          currNode = currNode.next;
        }
        return currNode;
      };
      this.insert = function(newElement, item) {
        var current, newNode;
        newNode = new Node(newElement);
        current = this.find(item);
        newNode.next = current.next;
        newNode.previous = current;
        current.next = newNode;
      };
      this.remove = function(item) {
        var currNode;
        currNode = this.find(item);
        if (currNode.next !== null) {
          currNode.previous.next = currNode.next;
          currNode.next.previous = currNode.previous;
          currNode.next = null;
          return currNode.previous = null;
        }
      };
      this.findLast = function() {
        var currNode;
        currNode = this.head;
        while (currNode.next !== null) {
          currNode = currNode.next;
        }
        return currNode;
      };
      this.display = function() {
        var currNode, _results;
        currNode = this.head;
        _results = [];
        while (!(currNode.next === null)) {
          console.log(currNode.next.element);
          _results.push(currNode = currNode.next);
        }
        return _results;
      };
      this.dispReverse = function() {
        var currNode, _results;
        currNode = this.head;
        currNode = this.findLast();
        _results = [];
        while (currNode.previous !== null) {
          console.log(currNode.element);
          _results.push(currNode = currNode.previous);
        }
        return _results;
      };
    }

    return LList;

  })();

  cities = new LList();

  cities.insert("Conway", "head");

  cities.insert("Russellville", "Conway");

  cities.insert("Carlisle", "Russellville");

  cities.insert("Alma", "Carlisle");

  cities.display();

  cities.remove("Carlisle");

  cities.display();

}).call(this);

//# sourceMappingURL=DoublyLinkList.js.map
